#!/bin/bash

MAILTMP=`mktemp`
BODYTMP=`mktemp`

function cleanup {
	test 1 == "$DEBUG" && echo "Cleanup."
	test -f "$MAILTMP" && rm "$MAILTMP"
	test -f "$BODYTMP" && rm "$BODYTMP"
}
trap cleanup EXIT

do_help() {
	while [ "$#" -gt 0 ]
	do
		echo "Error: $1">>/dev/stderr
		shift
	done

	cat <<EOF >&2
Syntax: mailtsv [-d] <--to addr> <--from addr> <--bcc addr> <--subject subj> <--bodytsv h f> <--bodyhtml str>

Sends a mail with the specified arguments.

The order of arguments beginning with "body" is preserved in the email

Valid options:


 -d --debug
                Print debugging information

 -n --no-op
                Don't actually send mail

 -t --to <addr>
                Send to this address (may specify multiple times)

 -f --from <addr>
                Send from this address

 -b --bcc <addr>
                BCC address (may specify multiple times)

 -c --cc <addr>
                CC address (may specify multiple times)

 -s --subject <subject>
                Subject line for the email

 -T --bodytsv <headers> <file>
                Insert HTML table for <file>, where <file> is a tsv file 
		(perhaps piped). Headers is a tab separated string. Headers
		may be an empty string.

 -H --bodyhtml <file>
                Insert HTML string

EOF
	exit 2
}

header() {
	cat <<EOF
${HEADERS}Content-Type: text/html

<html>
<style type="text/css">
	table{
		font-family: verdana,arial,sans-serif;
		font-size:11px;
		color:#333333;
		border-width: 1px;
		border-color: #666666;
		border-collapse: collapse;
		margin: 5px;
	}
	table th {
		border-width: 1px;
		padding: 8px;
		border-style: solid;
		border-color: #666666;
		background-color: #dedede;
	}
	table td {
		border-width: 1px;
		padding: 8px;
		border-style: solid;
		border-color: #666666;
		background-color: #ffffff;
	}
</style>
EOF
}

footer() {
	cat <<EOF
<hr/>
This is an automated report. Please contact $FROM with any queries or unsubscribe requests.
</html>

EOF
}

tsv_to_html() {
	awk "-vHEADERS=$1" -F'\t' '
BEGIN {
	print "\n<table>\n"
	if(HEADERS) {
		gsub("\t", "</th><th>", HEADERS);
		printf("\t<tr><th>%s</th></tr>\n", HEADERS);
	}
}
!NF {next}
{
	printf "\t<tr>"
	for(i = 1; i <= NF; i++) {
		align=""
		if($i ~ /^ *[0-9]+(.[0-9]+)? *$/) {
			align=" align=\"right\"";
		}
		printf("<td" align ">%s</td>", $i)
	}
	printf "</tr>\n"}
END {
	print "\n</table>\n"
}
'
}

while [[ "$#" -gt 0 ]]
do
	case $1 in
		-d|--debug)
			shift
			DEBUG=1
			;;
		-n|--no-op)
			shift
			NOOP=1
			;;
		-t|--to)
			shift
			[ "$TO" ] && TO="$TO,"
			TO="$TO$1"
			shift
			;;
		-f|--from)
			shift
			[ "$FROM" ] && do_help "Only one --from argument allowed!"
			FROM="$1"
			shift
			;;
		-b|--bcc)
			shift
			[ "$BCC" ] && BCC="$BCC,"
			BCC="$BCC$1"
			shift
			;;
		-c|--cc)
			shift
			[ "$CC" ] && CC="$CC,"
			CC="$CC$1"
			shift
			;;
		-s|--subject)
			shift
			[ "$SUBJECT" ] && do_help "Only one --subject argument allowed!"
			SUBJECT="$1"
			shift
			;;
		-T|--bodytsv)
			shift
			tsv_to_html "$1" <"$2" >>"$BODYTMP"
			shift
			shift
			;;
		-H|--bodyhtml)
			shift
			echo "<div>$1</div>">>"$BODYTMP"
			shift
			;;
		-h|--help)
			do_help
			;;
		*)
			do_help "Invalid option: $1"
			;;
	esac
done

[ "$TO" ] && HEADERS="${HEADERS}To: $TO"$'\n'
[ "$FROM" ] && HEADERS="${HEADERS}From: $FROM"$'\n'
[ "$BCC" ] && HEADERS="${HEADERS}BCC: $BCC"$'\n'
[ "$CC" ] && HEADERS="${HEADERS}CC: $CC"$'\n'
[ "$SUBJECT" ] && HEADERS="${HEADERS}Subject: $SUBJECT"$'\n'

if [ ! "$FROM" ]
then
	do_help "--from argument required!"
fi

header "$HEADERS" >> "$MAILTMP"
cat "$BODYTMP" >> "$MAILTMP"
footer >> "$MAILTMP"

if [ 1 == "$DEBUG" ]
then
	echo "Will mail:"
	cat "$MAILTMP"
fi

test 1 != "$NOOP" && /usr/lib/sendmail -t < "$MAILTMP"

